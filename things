Procedure

--Syntax of pl sql stored procedure:

CREATE [OR REPLACE] PROCEDURE proc_name [list of parameters] 
IS | AS    
   //Declaration block 
BEGIN    
   //Execution block 
EXCEPTION    
  //Exception block 
END;

--HOW TO CREATE A PROCEDURE

CREATE OR REPLACE PROCEDURE hello_world
AS
BEGIN
   dbms_output.put_line('Hello World!');
END;
/

--Procedure example with parameters:

CREATE OR REPLACE PROCEDURE add_student(rollNo IN NUMBER, name IN VARCHAR2)
IS 
   BEGIN 
    insert into students values(rollNo,name);
  END;
/

--EXECUTION STATMENTS

EXEC procedure_name();
EXEC procedure_name;

--WITH PARAMETERS

EXEC procedure_name(param1,param2…paramN);

--A procedure can also be invoked from other PL SQL block.

BEGIN
   procedure_name;
END;
/

--How to drop stored procedure?

DROP PROCEDURE procedure_name;

Procedure

--Syntax of pl sql stored procedure:

CREATE [OR REPLACE] PROCEDURE proc_name [list of parameters] 
IS | AS    
   //Declaration block 
BEGIN    
   //Execution block 
EXCEPTION    
  //Exception block 
END;

--HOW TO CREATE A PROCEDURE

CREATE OR REPLACE PROCEDURE hello_world
AS
BEGIN
   dbms_output.put_line('Hello World!');
END;
/

--Procedure example with parameters:

CREATE OR REPLACE PROCEDURE add_student(rollNo IN NUMBER, name IN VARCHAR2)
IS 
   BEGIN 
    insert into students values(rollNo,name);
  END;
/

--EXECUTION STATMENTS

EXEC procedure_name();
EXEC procedure_name;

--WITH PARAMETERS

EXEC procedure_name(param1,param2…paramN);

--A procedure can also be invoked from other PL SQL block.

BEGIN
   procedure_name;
END;
/

--How to drop stored procedure?

DROP PROCEDURE procedure_name;

--DECLARING A CONSTANT

DECLARE
   -- constant declaration
   pi constant number := 3.141592654;
   -- other declarations
   radius number(5,2); 
   dia number(5,2); 
   circumference number(7, 2);
   area number (10, 2);
BEGIN 
   -- processing
   radius := 10.5; 
   dia := radius * 2; 
   circumference := 2.0 * pi * radius;
   area := pi * radius * radius;
   -- output
   dbms_output.put_line('Radius: ' || radius);
   dbms_output.put_line('Diameter: ' || dia);
   dbms_output.put_line('Circumference: ' || circumference);
   dbms_output.put_line('Area: ' || area);
END;
/

/*
PL/SQL Literals:
Literals is an explicit numeric, character, string or Boolean values which are not represented by identifiers i.e. TRUE, NULL, w3spoint etc.
Note: PL/SQL literals are case-sensitive.

Types of literals in PL/SQL:
1. Numeric Literals (765, 23.56 etc.).
2. Character Literals (‘A’ ‘%’ ‘9’ ‘ ‘ ‘z’ etc.).
3. String Literals (tutorialspointexamples.com etc.).
4. BOOLEAN Literals (TRUE, FALSE and NULL).
5. Date and Time Literals (‘2016-12-25’ ‘2016-02-03 12:10:01’ etc.).
*/


--USING SWITCH

DECLARE
   nameChar char(1) := 'J';
BEGIN
   CASE nameChar
      when 'B' then dbms_output.put_line('Bharat');
      when 'R' then dbms_output.put_line('Richi');
      when 'S' then dbms_output.put_line('Sahdev');
      when 'V' then dbms_output.put_line('Vinod');
      when 'H' then dbms_output.put_line('Harish');
      when 'M' then dbms_output.put_line('Mahesh');
      when 'V' then dbms_output.put_line('Vivek');
      when 'A' then dbms_output.put_line('Anil');
      when 'J' then dbms_output.put_line('Jai');
      else dbms_output.put_line('No such name');
   END CASE;
END;
/

--PACKAGE 

--EX 
CREATE PACKAGE emp_sal AS
   PROCEDURE find_sal(e_id employees.id%type);
END emp_sal;
/

--EX2

CREATE OR REPLACE PACKAGE BODY emp_sal AS
   PROCEDURE find_sal(e_id employees.id%TYPE) IS
   e_sal employees.salary%TYPE;
   BEGIN
      SELECT salary INTO e_sal
      FROM employees
      WHERE id = e_id;
      dbms_output.put_line('Salary: '|| e_sal);
   END find_sal;
END emp_sal;
/

-AUDITING

create or replace trigger s_audit
before insert or delete or update on sh_audit
for each row
enable
declare
   x varchar(30);
   y varchar(30);
begin
   select user,TO_CHAR(sysdate,'DD/MON/YYYY HH24:MI:SS') into x,y from dual;
   if inserting then
      insert into sh_audit(new_name,old_name,user_name,entry_date,operation)
      values (null,null,x,y,'insert');
   elsif deleting then
      insert into sh_audit(new_name,old_name,user_name,entry_date,operation)
      values (null, null,x,y,'delete');
   elsif updating then
      insert into sh_audit(new_name,old_name,user_name,entry_date,operation)
      values(null, null,x,y,'update');
    end if;
end;


select * from sh_audit;
insert into superhero values('meenaakshi');









create or replace trigger tr_superhero
before insert or delete or update on superhero
for each row
declare
    x varchar(20);
begin
    select user into x from dual;
    if inserting then
     dbms_output.put_line('inserted by'||x);
    elsif deleting then
     dbms_output.put_line('deleted by'||x);
    elsif updating then
     dbms_output.put_line('updated by'||x);
    end if;
end;






set serveroutput on;
declare
   v_name varchar2(30);
   cursor cur_reb is
   select first_name from employee_detail;
begin
   open cur_reb;
   loop
    fetch cur_reb into v_name;
    exit when cur_reb%notfound;
    dbms_output.put_line(v_name);
   
   end loop;
   close cur_reb;
end;
/
--cursor parameter  
declare
   x varchar2(30);
   cursor cur_cur(var_id varchar2) is
   select first_name from employee_detail
   where employee_id=var_id;
begin
   open cur_cur(2);
   loop
     fetch cur_cur into x;
     exit when cur_cur%notfound;
     dbms_output.put_line(x);
   end loop;
   close cur_cur;
end;
/

--cursor parameter with default value
declare
   v_name varchar(30);
   v_id number(10);
   cursor cur_c(var_id number := 2) is
   select first_name,employee_id from employee_detail
   where employee_id > var_id;
begin
   open cur_c;
   loop
     fetch cur_c into v_name,v_id;
     exit when cur_c%notfound;
     dbms_output.put_line(v_name||' '||v_id);
   end loop;
   close cur_c;
end;
/


--cursor "for loop"
declare
   cursor cur_2 is
   select first_name,last_name from employee_detail
   where employee_id<=5;
begin
   for idx in cur_2
   loop
      dbms_output.put_line(idx.first_name||' '||idx.last_name);
   end loop;
end;
/

--cursor for loop with parameterised cursor
declare
   cursor cur_cur(var_id number) is
   select employee_id,first_name from employee_detail
   where employee_id < var_id;
begin
   for idx in cur_cur(5)
   loop
     dbms_output.put_line(idx.employee_id||' '||idx.first_name);
   end loop;
end;
/

SUMS CLOWNERY

set serveroutput ON;
set autoprint OFF;

VARIABLE v_bind1 varchar2(10);  --bind variable alias to global variable
EXECUTE :v_bind :='hello';


BEGIN
    :v_bind :='admin';
    DBMS_OUTPUT.put_line(:v_bind);
END;
/

DECLARE 
  l_message VARCHAR2(100) := 'My first message through PL/SQL';  --1
  op  INT := 12345; 
  v_1 INT(2) := &a;
  v_2 INT(2) := &b ;
  v_pi CONSTANT FLOAT := 3.141592;  -- assigning constant
BEGIN
  l_message :='Second message';  
  DBMS_OUTPUT.put_line (l_message);
  DBMS_OUTPUT.put_line('Printing message with CONCAT '||op);    --2
  DBMS_OUTPUT.put_line(v_1+v_2);     --2
  DBMS_OUTPUT.put_line(v_pi);
END;
/


DROP TABLE CUSTOMER;
--4th
CREATE TABLE CUSTOMERS( 
   ID   INT NOT NULL, 
   NAME VARCHAR (20) NOT NULL, 
   AGE INT NOT NULL, 
   ADDRESS CHAR (25), 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID) 
); 

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 ); 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (3, 'kaushik', 23, 'Kota', 2000.00 ); 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 ); 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 ); 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (6, 'Komal', 22, 'MP', 4500.00 );

DECLARE 
    v_salary INT ;
    anv_salary customers.salary%type;   --anchored data type
BEGIN 
    SELECT Salary into v_salary from CUSTOMERS where AGE = 27;
    SELECT Salary into anv_salary from CUSTOMERS where AGE = 32;
    DBMS_OUTPUT.put_line ('Salary of Customer with ID = 1 is '||v_salary);
    DBMS_OUTPUT.put_line (anv_salary);
END;
/


--5th

DECLARE         
    v_1 INT :=10;
    v_2 INT :=20;
    v_3 INT :=5;
BEGIN
    IF v_1 < v_3 and v_1 < v_2 THEN
        DBMS_OUTPUT.put_line('The Smallest no is '||v_1);
    END IF;
    IF v_2 <v_1 and v_2 < v_3 THEN
        DBMS_OUTPUT.put_line('The Smallest no is '||v_1);
    END IF;
    IF v_3 <v_1 and v_3 < v_2 THEN
        DBMS_OUTPUT.put_line('The Smallest no is '||v_3);   
    END IF;    
        DBMS_OUTPUT.put_line('good');
END;
/

--6
DECLARE 
    s1 VARCHAR(20) := &string_1;
    s2 VARCHAR(20) := &string_2;
BEGIN
    IF s1 LIKE s2 THEN
        DBMS_OUTPUT.put_line('Both are same string');
    ELSE
        DBMS_OUTPUT.put_line('Both are not same string');
    END IF;
END;
/

drop procedure GREETINGS;


CREATE OR REPLACE PROCEDURE GREETING AS
BEGIN
  dbms_output.put_line('This is a message');
END;
/



drop procedure C;
CREATE OR REPLACE PROCEDURE C as
    c_id country.country_id%type;
    c_name country.country_name%type;
   
BEGIN
    SELECT COUNTRY_ID , COUNTRY_NAME INTO c_id,c_name
    FROM Country
    WHERE c_name  LIKE 'I%';

   
    dbms_output.put_line(c_name);
    end;
    /
    
--findmin with procedure
CREATE OR REPLACE PROCEDURE findmin(x in number,y in number,z out number) is
BEGIN
    IF x<y THEN
        z:= x;
    ELSE
        z:= y;
    END IF;
END;
/

declare 
    a number :=&a;
    b number :=&b;
    c number ;
begin
    findmin(a,b,c);
    dbms_output.put_line('MINIMUM'||c);
end; 







DECLARE
a number;
PROCEDURE squareNum(x IN OUT number) IS
BEGIN
x := x * x;
END;
BEGIN
a:= 23;
squareNum(a);
dbms_output.put_line(' Square of (23): ' || a);
END;




set serveroutput on;

DECLARE 
  nom number;
PROCEDURE squareit( y IN OUT number) IS
BEGIN 
    y := y * y;
END;
BEGIN 
    nom := 15;
    squareit(nom);
    dbms_output.put_line('Answer : '|| nom);
END;



--function

CREATE OR REPLACE FUNCTION AREA_CIRCLE(radius number) 
RETURN number IS
PI constant number(7,3):= 3.141;
area number(7,3);
BEGIN
    area := PI * ( radius * radius );
    return area;
END;
/



BEGIN
    --area = AREA_CIRCLE(12.4);
    dbms_output.put_line(AREA_CIRCLE(22));
END;
/
    


CREATE OR REPLACE FUNCTION FIND_MIN(a in number,b in number)
RETURN number is
    c number;
BEGIN
    IF a > b THEN
        c := b;
        return c;
    ELSE
        c := a;
        return c;
    END IF;
END;
/


BEGIN     
    dbms_output.put_line(FIND_MIN(101,20));
END;
/

DECLARE 
    a number := &num1;
    b number := &num2;
    c number;
BEGIN     
    c := FIND_MIN(a,b);
    dbms_output.put_line(c);
END;
/

--end of function



--function problem

CREATE OR REPLACE FUNCTION NO_CUST
RETURN INT IS
 total number(2) := 0 ;
BEGIN
    SELECT COUNT(*) INTO total FROM CUSTOMERS;
    RETURN total;
    dbms_output.put_line('Total no of Customers is '||total);
END;
/


EXECUTE  FINDMIN(78,77);  --demo

BEGIN
    dbms_output.put_line(NO_CUST());
END;
/





--RECURSEIVE FUNCTION

CREATE OR REPLACE FUNCTION FACTORIAL(f int)
RETURN number IS
    ans number ;
BEGIN
    IF f = 0 THEN
        ans := 1;
    ELSE 
        ans := ans * FACTORIAL(f-1);
    END IF;
    RETURN ans;
END;
/
        

SET SERVEROUTPUT ON;

DECLARE
    num number ;
    f number ;
BEGIN
num:= 6;
f := FACTORIAL(num);
dbms_output.put_line(' Factorial '|| num || ' is ' || f);
END;
/



SELECT EXTRACT(YEAR FROM DATE '1999-11-12') from dual;


DEClARE 
TYPE new_rec IS RECORD(
    v_1 number, 
    v_2 int,
    v_3 varchar(20)
);
 r1 new_rec;

BEGIN
    dbms_output.put_line('User Record Data created');
END;
/




--  USING EXPLICIT CURSOR

SET SERVEROUTPUT ON;
DECLARE 
  v_total number(2);
BEGIN
    UPDATE customers 
    set salary = salary + 500;
    IF sql%notfound THEN 
        dbms_output.put_line('No customers found');
    ELSIF sql%found THEN
        v_total := sql%rowcount;
        dbms_output.put_line('No of Records Updated : '||v_total);
    END IF;
END;
/


--using IMPLICIT CURSORS

DECLARE 
    id BILL.bill_id%type;
    iname BILL.item_name%type;
    code BILL.item_code%type;
    price BILL.price%type;
    
    CURSOR cur_bill is
        SELECT bill_id , item_name, item_code, price from BILL;
        
BEGIN 
    open cur_bill;
    LOOP
        fetch cur_bill into id,iname,code,price;
        EXIT WHEN cur_bill%notfound;    
        dbms_output.put_line( id||' '||iname||' '||code||' '||price );
    END LOOP;
    CLOSE cur_bill;
END;
/

--using parameterized explicit cursor with default parameter

DECLARE
    cur_input number ;
    v_name customers.name%type;
    cursor cur_cust(cur_input number := 11000) is
        SELECT name from customers where salary >= cur_input;
BEGIN
    open cur_cust;
    dbms_output.put_line('Name of customers having salary greater than '||cur_input);
    LOOP 
        fetch cur_cust into v_name;
        exit when cur_cust%notfound;
        dbms_output.put_line('Name : '||v_name);
    END LOOP;
END;
/
    
-- looping cursor
DECLARE
    cur_input number ;
    v_name customers.name%type;
    cursor cur_cust(cur_input number := 5000) is
        SELECT name from customers where salary >= cur_input;
BEGIN
    for idex in cur_cust(8000)
    loop 
        dbms_output.put_line(idex.name);
    END LOOP;
END;
/



--problem sheet answer cursor
DECLARE 
    cursor cur_emp is SELECT employee_id , first_name , salary from employees where departament_id = 50 for update;
    incr number;
BEGIN
    for rec_cur in cur_emp LOOP 
        if rec_cur.salary < 9000 THEN
            incr := 0.2;
        ELSE 
            incr := 0.12;
        END IF;
        UPDATE employees set salary = salary + (salary * incr) WHERE CURRENT OF rec_cur ;
    END LOOP;
END;
/

/*          NOT CORRECT
        
DECLARE
 CURSOR c_dept IS 
  SELECT * 
  FROM departments
  WHERE manager_id IS NOT NULL
  ORDER BY department_name;
  r_dept c_dept%ROWTYPE

CURSOR c_emp (c_dept_no departments.department_id%TYPE) IS
  SELECT *  FROM employees
  WHERE department_id = c_dept_no;
  
  r_emp c_emp%ROWTYPE;
    
        

BEGIN
   OPEN c_dept;
   LOOP
     FETCH c_dept INTO r_dept;
      EXIT WHEN c_dept%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('----------------------------------');
      DBMS_OUTPUT.PUT_LINE('Department Name : '||r_dept.department_name);
      DBMS_OUTPUT.PUT_LINE('----------------------------------');
          OPEN c_emp(r_dept.department_id);
           LOOP
            FETCH c_emp INTO r_emp;
             EXIT WHEN c_emp%NOTFOUND;
                DBMS_OUTPUT.PUT_LINE('Employees Details : '||r_emp.employee_id
			||' '||r_emp.first_name||' '||r_emp.last_name||' '||r_emp.salary);
           END LOOP;
          CLOSE c_emp;  
   END LOOP;
   CLOSE c_dept;
END;

 */
        
    
CREATE OR REPLACE PACKAGE package_1 as 
    FUNCTION find_sal(c_id customers.ID%type) RETURN number;
    PROCEDURE add_new(c_id customers.ID%type,c_name customers.name%type,c_age customers.age%type);
END package_1;
/

CREATE OR REPLACE PACKAGE BODY package_1 as
    
        PROCEDURE add_new(c_id customers.ID%type,c_name customers.name%type,c_age customers.age%type) IS
        BEGIN 
            insert into customers (id,name,age) values(c_id,c_name,c_age);
            dbms_output.put_line('Record successfully inserted');
        END add_new;
        
        FUNCTION find_sal(c_id customers.ID%type)
        RETURN number IS
        c_sal customers.salary%type;
        BEGIN 
            select salary into c_sal from customers where id=c_id;
            return c_sal;
        END find_sal;
END package_1;
/

DECLARE
        
BEGIN
        
*********ARRAYS:*********

SYNTAX:

CREATE OR REPLACE TYPE varray_type_name IS VARRAY(n) of <element_type>

TYPE varray_type_name IS VARRAY(n) of <element_type>

CREATE Or REPLACE TYPE namearray AS VARRAY(3) OF VARCHAR2(10);
/

EXAMPLE:

TYPE namearray IS VARRAY(5) OF VARCHAR2(10);
Type grades IS VARRAY(5) OF INTEGER;

EXAMPLE:

DECLARE
 type namesarray IS VARRAY(5) OF VARCHAR2(10);
 type grades IS VARRAY(5) OF INTEGER;
 names namesarray;
 marks grades;
 total integer;
BEGIN
 names := namesarray('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz');
 marks:= grades(98, 97, 78, 87, 92);
 total := names.count;
 dbms_output.put_line('Total '|| total || ' Students');
 FOR i in 1 .. total LOOP
 dbms_output.put_line('Student: ' || names(i) || '
 Marks: ' || marks(i));
 END LOOP;
END;
/

EXAMPLE 2:

DECLARE
 CURSOR c_customers is
 SELECT name FROM customers;
 type c_list is varray (6) of customerS.No.ame%type;
 name_list c_list := c_list();
 counter integer :=0;
BEGIN
 FOR n IN c_customers LOOP
 counter := counter + 1;
 name_list.extend;
 name_list(counter) := n.name;
 dbms_output.put_line('Customer('||counter ||'):'||name_list(counter));
 END LOOP;
END;
/

BULLITEN FUNCTIONS :
Function & Purpose

1
ASCII(x);
Returns the ASCII value of the character x.

2
CHR(x);
Returns the character with the ASCII value of x.

3
CONCAT(x, y);
Concatenates the strings x and y and returns the appended string.

4
INITCAP(x);
Converts the initial letter of each word in x to uppercase and returns that
string.

5
INSTR(x, find_string [, start] [, occurrence]);
Searches for find_string in x and returns the position at which it occurs.

6
INSTRB(x);
Returns the location of a string within another string, but returns the value in
bytes.

7
LENGTH(x);
Returns the number of characters in x.

8
LENGTHB(x);
Returns the length of a character string in bytes for single byte character set.

9
LOWER(x);
Converts the letters in x to lowercase and returns that string.

10
LPAD(x, width [, pad_string]) ;
Pads x with spaces to the left, to bring the total length of the string up to width
characters.

11
LTRIM(x [, trim_string]);
Trims characters from the left of x.

12
NANVL(x, value);
Returns value if x matches the NaN special value (not a number), otherwise x
is returned.

13
NLS_INITCAP(x);
Same as the INITCAP function except that it can use a different sort method
as specified by NLSSORT.

14
NLS_LOWER(x) ;
Same as the LOWER function except that it can use a different sort method as
specified by NLSSORT.

15
NLS_UPPER(x);
Same as the UPPER function except that it can use a different sort method as
specified by NLSSORT.

16
NLSSORT(x);
Changes the method of sorting the characters. Must be specified before any
NLS function; otherwise, the default sort will be used.

17
NVL(x, value);
Returns value if x is null; otherwise, x is returned.

18
NVL2(x, value1, value2);
Returns value1 if x is not null; if x is null, value2 is returned.

19
REPLACE(x, search_string, replace_string);
Searches x for search_string and replaces it with replace_string.

20
RPAD(x, width [, pad_string]);
Pads x to the right.

21
RTRIM(x [, trim_string]);
Trims x from the right.

22
SOUNDEX(x) ;
Returns a string containing the phonetic representation of x.

23
SUBSTR(x, start [, length]);
Returns a substring of x that begins at the position specified by start. An
optional length for the substring may be supplied.

24
SUBSTRB(x);
Same as SUBSTR except that the parameters are expressed in bytes instead
of characters for the single-byte character systems.

25
TRIM([trim_char FROM) x);
Trims characters from the left and right of x.

26
UPPER(x);
Converts the letters in x to uppercase and returns that string.

Example 1:

DECLARE
 greetings varchar2(11) := 'hello world';
BEGIN
 dbms_output.put_line(UPPER(greetings));

 dbms_output.put_line(LOWER(greetings));

 dbms_output.put_line(INITCAP(greetings));

 /* retrieve the first character in the string */
 dbms_output.put_line ( SUBSTR (greetings, 1, 1));

 /* retrieve the last character in the string */
 dbms_output.put_line ( SUBSTR (greetings, -1, 1));

 /* retrieve five characters,
 starting from the seventh position. */
 dbms_output.put_line ( SUBSTR (greetings, 7, 5));

 /* retrieve the remainder of the string,
 starting from the second position. */
 dbms_output.put_line ( SUBSTR (greetings, 2));

 /* find the location of the first "e" */
 dbms_output.put_line ( INSTR (greetings, 'e'));
END;
/

Example 2:

DECLARE
 greetings varchar2(30) := '......Hello World.....';
BEGIN
 dbms_output.put_line(RTRIM(greetings,'.'));
 dbms_output.put_line(LTRIM(greetings, '.'));
 dbms_output.put_line(TRIM( '.' from greetings));
END;
/

**********conditional stats******************
IF THEN SYNTAX:

IF condition THEN
 S;
END IF;

EXAMPLE:

IF (a <= 20) THEN
 c:= c+1;
END IF;

DECLARE
 a number(2) := 10;
BEGIN
 a:= 10;
 -- check the boolean condition using if statement
 IF( a < 20 ) THEN
 -- if condition is true then print the following
 dbms_output.put_line('a is less than 20 ' );
 END IF;
 dbms_output.put_line('value of a is : ' || a);
END;
/

DECLARE
 c_id customers.id%type := 1;
 c_sal customers.salary%type;
BEGIN
 SELECT salary
 INTO c_sal
 FROM customers
 WHERE id = c_id;
 IF (c_sal <= 2000) THEN
 UPDATE customers
 SET salary = salary + 1000
 WHERE id = c_id;
 dbms_output.put_line ('Salary updated');
 END IF;
END;
/

IF-THEN-ELSE SYNTAX:

IF condition THEN
 S1;
ELSE
 S2;
END IF;

EXAMPLE:

DECLARE
 a number(3) := 100;
BEGIN
 -- check the boolean condition using if statement
 IF( a < 20 ) THEN
 -- if condition is true then print the following
 dbms_output.put_line('a is less than 20 ' );
 ELSE
 dbms_output.put_line('a is not less than 20 ' );
 END IF;
 dbms_output.put_line('value of a is : ' || a);
END;
/

IF-THEN-ELSIF SYNTAX:

IF(boolean_expression 1)THEN
 S1; -- Executes when the boolean expression 1 is true
ELSIF( boolean_expression 2) THEN
 S2; -- Executes when the boolean expression 2 is true
ELSIF( boolean_expression 3) THEN
 S3; -- Executes when the boolean expression 3 is true
ELSE
 S4; -- executes when the none of the above condition is true
END IF;

EXAMPLE:

DECLARE
 a number(3) := 100;
BEGIN
 IF ( a = 10 ) THEN
  dbms_output.put_line('Value of a is 10' );
 ELSIF ( a = 20 ) THEN
  dbms_output.put_line('Value of a is 20' );
 ELSIF ( a = 30 ) THEN
  dbms_output.put_line('Value of a is 30' );
 ELSE
  dbms_output.put_line('None of the values is matching');
 END IF;
  dbms_output.put_line('Exact value of a is: '|| a );
END;
/

CASE SYNTAX:

CASE selector
 WHEN 'value1' THEN S1;
 WHEN 'value2' THEN S2;
 WHEN 'value3' THEN S3;
 ...
 ELSE Sn; -- default case
END CASE;

EXAMPLE:

DECLARE
 grade char(1) := 'A';
BEGIN
 CASE grade
 when 'A' then dbms_output.put_line('Excellent');
 when 'B' then dbms_output.put_line('Very good');
 when 'C' then dbms_output.put_line('Well done');
 when 'D' then dbms_output.put_line('You passed');
 when 'F' then dbms_output.put_line('Better try again');
 else dbms_output.put_line('No such grade');
 END CASE;
END;
/

SEARCHED CASE SYNTAX:

CASE
 WHEN selector = 'value1' THEN S1;
 WHEN selector = 'value2' THEN S2;
 WHEN selector = 'value3' THEN S3;
 ...
 ELSE Sn; -- default case
END CASE;

EXAMPLE:

DECLARE
 grade char(1) := 'B';
BEGIN
 case
 when grade = 'A' then dbms_output.put_line('Excellent');
 when grade = 'B' then dbms_output.put_line('Very good');
 when grade = 'C' then dbms_output.put_line('Well done');
 when grade = 'D' then dbms_output.put_line('You passed');
 when grade = 'F' then dbms_output.put_line('Better try again');
 else dbms_output.put_line('No such grade');
 end case;
END;
/

NESTED IF THEN ELSE SYNTAX:

IF( boolean_expression 1)THEN
 -- executes when the boolean expression 1 is true
 IF(boolean_expression 2) THEN
 -- executes when the boolean expression 2 is true
 sequence-of-statements;
 END IF;
ELSE
 -- executes when the boolean expression 1 is not true
 else-statements;
END IF;

EXAMPLE:

DECLARE
 a number(3) := 100;
 b number(3) := 200;
BEGIN
 -- check the boolean condition
 IF( a = 100 ) THEN
 -- if condition is true then check the following
 IF( b = 200 ) THEN
 -- if condition is true then print the following
 dbms_output.put_line('Value of a is 100 and b is 200' );
 END IF;
 END IF;
 dbms_output.put_line('Exact value of a is : ' || a );
 dbms_output.put_line('Exact value of b is : ' || b );
END;
/


******cursors********
IMPLICIT CURSORS:

Attribute Description

%FOUND
Returns TRUE if an INSERT, UPDATE, or DELETE statement
affected one or more rows or a SELECT INTO statement returned
one or more rows. Otherwise, it returns FALSE.

%NOTFOUND
The logical opposite of %FOUND. It returns TRUE if an INSERT,
UPDATE, or DELETE statement affected no rows, or a SELECT
INTO statement returned no rows. Otherwise, it returns FALSE.

%ISOPEN
Always returns FALSE for implicit cursors, because Oracle closes
the SQL cursor automatically after executing its associated SQL
statement.

%ROWCOUNT Returns the number of rows affected by an INSERT, UPDATE, or
DELETE statement, or returned by a SELECT INTO statement.

EXAMPLE:

DECLARE
 total_rows number(2);
BEGIN
   UPDATE customers
   SET salary = salary + 500;
   IF sql%notfound THEN
   dbms_output.put_line('no customers selected');
   ELSIF sql%found THEN
   total_rows := sql%rowcount;
  dbms_output.put_line( total_rows || ' customers selected ');
 END IF;
END;
/

EXPLICIT CURSORS:

--Declaring the Cursor

CURSOR c_customers IS
 SELECT id, name, address FROM customers;
 
--Opening the Cursor
 
 OPEN c_customers;
 
--Fetching the Cursor

FETCH c_customers INTO c_id, c_name, c_addr;

--Closing the Cursor

CLOSE c_customers;

EXAMPLE :

DECLARE
 c_id customers.id%type;
 c_name customerS.No.ame%type;
 c_addr customers.address%type;
 CURSOR c_customers is
 SELECT id, name, address FROM customers;
BEGIN
 OPEN c_customers;
 LOOP
 FETCH c_customers into c_id, c_name, c_addr;
 EXIT WHEN c_customers%notfound;
 dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr);
 END LOOP;
 CLOSE c_customers;
END;
/

******EXCEPTION******

SYNTAX:

DECLARE
 <declarations section>
BEGIN
 <executable command(s)>
EXCEPTION
 <exception handling goes here >
 WHEN exception1 THEN
 exception1-handling-statements
 WHEN exception2 THEN
 exception2-handling-statements
 WHEN exception3 THEN
 exception3-handling-statements
 ........
 WHEN others THEN
 exception3-handling-statements
END;

EXAMPLE:

DECLARE
 c_id customers.id%type := 8;
 c_name customerS.No.ame%type;
 c_addr customers.address%type;
BEGIN
 SELECT name, address INTO c_name, c_addr
 FROM customers
 WHERE id = c_id;
 DBMS_OUTPUT.PUT_LINE ('Name: '|| c_name);
 DBMS_OUTPUT.PUT_LINE ('Address: ' || c_addr);
EXCEPTION
 WHEN no_data_found THEN
 dbms_output.put_line('No such customer!');
 WHEN others THEN
 dbms_output.put_line('Error!');
END;
/

Raising Exceptions:

DECLARE
 exception_name EXCEPTION;
BEGIN
 IF condition THEN
  RAISE exception_name;
 END IF;
EXCEPTION
 WHEN exception_name THEN
 statement;
END;

User-defined Exceptions:

DECLARE
 my-exception EXCEPTION;
 
EXAMPLE:

DECLARE
 c_id customers.id%type := &cc_id;
 c_name customerS.No.ame%type;
 c_addr customers.address%type;
 -- user defined exception
 ex_invalid_id EXCEPTION;
BEGIN
 IF c_id <= 0 THEN
 RAISE ex_invalid_id;
 ELSE
 SELECT name, address INTO c_name, c_addr
 FROM customers
 WHERE id = c_id;
 DBMS_OUTPUT.PUT_LINE ('Name: '|| c_name);
 DBMS_OUTPUT.PUT_LINE ('Address: ' || c_addr);
 END IF;
EXCEPTION
 WHEN ex_invalid_id THEN
 dbms_output.put_line('ID must be greater than zero!');
 WHEN no_data_found THEN
 dbms_output.put_line('No such customer!');
 WHEN others THEN
 dbms_output.put_line('Error!');
END;
/

Pre-defined Exceptions:

PL/SQL provides many pre-defined exceptions, which are executed when any database
rule is violated by a program. For example, the predefined exception NO_DATA_FOUND is
raised when a SELECT INTO statement returns no rows. The following table lists few of
the important pre-defined exceptions:

FORMAT: EXCEPTION   ORCALE_ERROR  SQL_CODE  DESCRIPTION

ACCESS_INTO_NULL 06530 -6530 It is raised when a null object is
automatically assigned a value.

CASE_NOT_FOUND 06592 -6592
It is raised when none of the
choices in the WHEN clause of a
CASE statement is selected, and
there is no ELSE clause.

COLLECTION_IS_NULL 06531 -6531
It is raised when a program
attempts to apply collection
methods other than EXISTS to an
uninitialized nested table or
varray, or the program attempts
to assign values to the elements of
an uninitialized nested table or
varray.

DUP_VAL_ON_INDEX 00001 -1
It is raised when duplicate values
are attempted to be stored in a
column with unique index.

INVALID_CURSOR 01001 -1001
It is raised when attempts are
made to make a cursor operation
that is not allowed, such as closing
an unopened cursor.

INVALID_NUMBER 01722 -1722
It is raised when the conversion of
a character string into a number
fails because the string does not
represent a valid number.

LOGIN_DENIED 01017 -1017
It is raised when a program
attempts to log on to the database
with an invalid username or
password.

NO_DATA_FOUND 01403 +100 It is raised when a SELECT INTO
statement returns no rows.

NOT_LOGGED_ON 01012 -1012
It is raised when a database call is
issued without being connected to
the database.

PROGRAM_ERROR 06501 -6501 It is raised when PL/SQL has an
internal problem.

ROWTYPE_MISMATCH 06504 -6504
It is raised when a cursor fetches
value in a variable having
incompatible data type.

SELF_IS_NULL 30625 -30625
It is raised when a member
method is invoked, but the
instance of the object type was not
initialized.

STORAGE_ERROR 06500 -6500
It is raised when PL/SQL ran out of
memory or memory was
corrupted.

TOO_MANY_ROWS 01422 -1422
It is raised when a SELECT INTO
statement returns more than one
row.

VALUE_ERROR 06502 -6502
It is raised when an arithmetic,
conversion, truncation, or sizeconstraint error occurs.

ZERO_DIVIDE 01476 1476 It is raised when an attempt is
made to divide a number by zero.


*******FUNCTIONS*********


SYNTAX:

CREATE [OR REPLACE] FUNCTION function_name
[(parameter_name [IN | OUT | IN OUT] type [, ...])]
RETURN return_datatype
{IS | AS}
BEGIN
 < function_body >
END [function_name];

EXAMPLE:

CREATE OR REPLACE FUNCTION totalCustomers
RETURN number IS
 total number(2) := 0;
BEGIN
 SELECT count(*) into total
 FROM customers;

 RETURN total;
END;
/

DECLARE
 c number(2);
BEGIN
 c := totalCustomers();
 dbms_output.put_line('Total no. of Customers: ' || c);
END;
/

EXAMPLE :

DECLARE
 a number;
 b number;
 c number;
FUNCTION findMax(x IN number, y IN number)
RETURN number
IS
 z number;
BEGIN
 IF x > y THEN
 z:= x;
 ELSE
 Z:= y;
 END IF;
 RETURN z;
END;

BEGIN
 a:= 23;
 b:= 45;
 c := findMax(a, b);
 dbms_output.put_line(' Maximum of (23,45): ' || c);
END;
/

EXAMPLE FACTORIAL:

DECLARE
 num number;
 factorial number;
FUNCTION fact(x number)
RETURN number
IS
 f number;
 BEGIN
 IF x=0 THEN
 f := 1;
 ELSE
 f := x * fact(x-1);
 END IF;
RETURN f;
END;
BEGIN
 num:= 6;
 factorial := fact(num);
 dbms_output.put_line(' Factorial '|| num || ' is ' || factorial);
END;
/

*******LOOPS**********

SYNTAX:

LOOP
 Sequence of statements;
END LOOP;

EXAMPLE:

DECLARE
 x number := 10;
BEGIN
 LOOP
 dbms_output.put_line(x);
 x := x + 10;
 IF x > 50 THEN
 exit;
 END IF;
 END LOOP;
 -- after exit, control resumes here
 dbms_output.put_line('After Exit x is: ' || x);
END;
/

 EXIT WHEN:
 
 DECLARE
 x number := 10;
BEGIN
 LOOP
 dbms_output.put_line(x);
 x := x + 10;
 exit WHEN x > 50;
 END LOOP;
 -- after exit, control resumes here
 dbms_output.put_line('After Exit x is: ' || x);
END;
/

WHILE LOOP:

SYNTAX:

WHILE condition LOOP
 sequence_of_statements
END LOOP;

EXAMPLE:

DECLARE
 a number(2) := 10;
BEGIN
 WHILE a < 20 LOOP
 dbms_output.put_line('value of a: ' || a);
 a := a + 1;
 END LOOP;
END;
/

FOR LOOP:

SYNTAX:

FOR counter IN initial_value .. final_value LOOP
 sequence_of_statements;
END LOOP;

EXAMPLE:

DECLARE
 a number(2);
BEGIN
 FOR a in 10 .. 20 LOOP
 dbms_output.put_line('value of a: ' || a);
 END LOOP;
END;
/

REVERSE FOR LOOP:

DECLARE
 a number(2) ;
BEGIN
 FOR a IN REVERSE 10 .. 20 LOOP
 dbms_output.put_line('value of a: ' || a);
 END LOOP;
END;
/

Nested Loops:

SYNTAX:

LOOP
 Sequence of statements1
 LOOP
 Sequence of statements2
 END LOOP;
END LOOP;

SYNTAX NESTED FOR LOOP:

FOR counter1 IN initial_value1 .. final_value1 LOOP
 sequence_of_statements1
 FOR counter2 IN initial_value2 .. final_value2 LOOP
 sequence_of_statements2
 END LOOP;
END LOOP;

SYNTAX FOR NESTED WHILE LOOP:

WHILE condition1 LOOP
 sequence_of_statements1
 WHILE condition2 LOOP
 sequence_of_statements2
 END LOOP;
END LOOP;

EXAMPLE:

DECLARE
 i number(3);
 j number(3);
BEGIN
 i := 2;
 LOOP
 j:= 2;
 LOOP
 exit WHEN ((mod(i, j) = 0) or (j = i));
 j := j +1;
 END LOOP;
 IF (j = i ) THEN
 dbms_output.put_line(i || ' is prime');
 END IF;
 i := i + 1;
 exit WHEN i = 50;
 END LOOP;
END;
/

Labeling a PL/SQLLoop:

DECLARE
 i number(1);
 j number(1);
BEGIN
 << outer_loop >>
 FOR i IN 1..3 LOOP
 << inner_loop >>
 FOR j IN 1..3 LOOP
 dbms_output.put_line('i is: '|| i || ' and j is: ' || j);
 END loop inner_loop;
 END loop outer_loop;
END;
/

The Loop Control Statements:

EXIT:

DECLARE
 a number(2) := 10;
BEGIN
 -- while loop execution
 WHILE a < 20 LOOP
 dbms_output.put_line ('value of a: ' || a);
 a := a + 1;
 IF a > 15 THEN
 -- terminate the loop using the exit statement
 EXIT;
 END IF;
 END LOOP;
END;
/

EXIT WHEN:

DECLARE
 a number(2) := 10;
BEGIN
 -- while loop execution
 WHILE a < 20 LOOP
 dbms_output.put_line ('value of a: ' || a);
 a := a + 1;
 -- terminate the loop using the exit when statement
 EXIT WHEN a > 15;
 END LOOP;
END;
/

CONTINUE:

DECLARE
 a number(2) := 10;
BEGIN
 -- while loop execution
 WHILE a < 20 LOOP
 dbms_output.put_line ('value of a: ' || a);
 a := a + 1;
 IF a = 15 THEN
 -- skip the loop using the CONTINUE statement
 a := a + 1;
 CONTINUE;
 END IF;
 END LOOP;
END;
/

GOTO:

SYNTAX:

GOTO label;
..
..
<< label >>
statement;

EXAMPLE:

DECLARE
 a number(2) := 10;
BEGIN
 <<loopstart>>
 -- while loop execution
 WHILE a < 20 LOOP
 dbms_output.put_line ('value of a: ' || a);
 a := a + 1;
 IF a = 15 THEN
 a := a + 1;
 GOTO loopstart;
 END IF;
 END LOOP;
END;
/

*****PACKAGE******

EXAMPLE:

CREATE PACKAGE cust_sal AS
 PROCEDURE find_sal(c_id customers.id%type);
END cust_sal;
/

Package Body:

CREATE OR REPLACE PACKAGE BODY cust_sal AS
 PROCEDURE find_sal(c_id customers.id%TYPE) IS
 c_sal customers.salary%TYPE;
 BEGIN
 SELECT salary INTO c_sal
 FROM customers
 WHERE id = c_id;
 dbms_output.put_line('Salary: '|| c_sal);
 END find_sal;
END cust_sal;
/

Using the Package Elements:

DECLARE
 code customers.id%type := &cc_id;
BEGIN
 cust_sal.find_sal(code);
END;
/

The Package Specification:

CREATE OR REPLACE PACKAGE c_package AS
 -- Adds a customer
 PROCEDURE addCustomer(c_id customers.id%type,
 c_name customerS.No.ame%type,
 c_age customers.age%type,
 c_addr customers.address%type,
 c_sal customers.salary%type);

 -- Removes a customer
 PROCEDURE delCustomer(c_id customers.id%TYPE);
 --Lists all customers
 PROCEDURE listCustomer;
END c_package;
/

Creating the Package Body:

CREATE OR REPLACE PACKAGE BODY c_package AS
 PROCEDURE addCustomer(c_id customers.id%type,
 c_name customerS.No.ame%type,
 c_age customers.age%type,
 c_addr customers.address%type,
 c_sal customers.salary%type)
 IS
 BEGIN
 INSERT INTO customers (id,name,age,address,salary)
 VALUES(c_id, c_name, c_age, c_addr, c_sal);
 END addCustomer;

 PROCEDURE delCustomer(c_id customers.id%type) IS
 BEGIN
 DELETE FROM customers
 WHERE id = c_id;
 END delCustomer;
 PROCEDURE listCustomer IS
 CURSOR c_customers is
 SELECT name FROM customers;
 TYPE c_list is TABLE OF customerS.No.ame%type;
 name_list c_list := c_list();                  
 counter integer :=0;
 BEGIN
 FOR n IN c_customers LOOP
 counter := counter +1;
 name_list.extend;
 name_list(counter) := n.name;
 dbms_output.put_line('Customer(' ||counter|| ')'||name_list(counter));
 END LOOP;
 END listCustomer;
END c_package;
/

Using The Package:

DECLARE
 code customers.id%type:= 8;
BEGIN
 c_package.addcustomer(7, 'Rajnish', 25, 'Chennai', 3500);
 c_package.addcustomer(8, 'Subham', 32, 'Delhi', 7500);
 c_package.listcustomer;
 c_package.delcustomer(code);
 c_package.listcustomer;
END;
/

*********PROCEDURE********
SYNTAX:

CREATE [OR REPLACE] PROCEDURE procedure_name
[(parameter_name [IN | OUT | IN OUT] type [, ...])]
{IS | AS}
BEGIN
 < procedure_body >
END procedure_name;

EXAMPLE:

CREATE OR REPLACE PROCEDURE greetings
AS
BEGIN
 dbms_output.put_line('Hello World!');
END;
/

EXECUTE greetings;

BEGIN
 greetings;
END;
/

DROP PROCEDURE procedure-name;

DROP PROCEDURE greetings;

EXAMPLE: PROCEDURE USING PL/SQL

DECLARE
 a number;
 b number;
 c number;
PROCEDURE findMin(x IN number, y IN number, z OUT number) IS
BEGIN
 IF x < y THEN
 z:= x;
 ELSE
 z:= y;
 END IF;
END;
BEGIN
 a:= 23;
 b:= 45;
 findMin(a, b, c);
 dbms_output.put_line(' Minimum of (23, 45) : ' || c);
END;
/

*****TRANSACTION******
For example:

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (7, 'Rajnish', 27, 'HP', 9500.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (8, 'Riddhi', 21, 'WB', 4500.00 );
SAVEPOINT sav1;
UPDATE CUSTOMERS
SET SALARY = SALARY + 1000;
ROLLBACK TO sav1;
UPDATE CUSTOMERS
SET SALARY = SALARY + 1000
WHERE ID = 7;
UPDATE CUSTOMERS
SET SALARY = SALARY + 1000
WHERE ID = 8;
COMMIT;

Automatic Transaction Control

To execute a COMMIT automatically whenever an INSERT, UPDATE or DELETE
command is executed, you can set the AUTOCOMMIT environment variable as:

SET AUTOCOMMIT ON;

You can turn-off the auto commit mode using the following command:
SET AUTOCOMMIT OFF;

*******TRIGGERS*******
SYNTAX:

CREATE [OR REPLACE ] TRIGGER trigger_name
{BEFORE | AFTER | INSTEAD OF }
{INSERT [OR] | UPDATE [OR] | DELETE}
[OF col_name]
ON table_name
[REFERENCING OLD AS o NEW AS n]
[FOR EACH ROW]
WHEN (condition)
DECLARE
 Declaration-statements
 BEGIN
 Executable-statements
EXCEPTION
 Exception-handling-statements
END;

EXAMPLE:

CREATE OR REPLACE TRIGGER display_salary_changes
BEFORE DELETE OR INSERT OR UPDATE ON customers
FOR EACH ROW
WHEN (NEW.ID > 0)
DECLARE
 sal_diff number;
BEGIN
 sal_diff := :NEW.salary - :OLD.salary;
 dbms_output.put_line('Old salary: ' || :OLD.salary);
 dbms_output.put_line('New salary: ' || :NEW.salary);
 dbms_output.put_line('Salary difference: ' || sal_diff);
END;
/



